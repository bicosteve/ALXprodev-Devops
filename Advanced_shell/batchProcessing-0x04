#!/bin/bash

# Define the list of Pokémon
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Base API URL
API_BASE="https://pokeapi.co/api/v2/pokemon"

# Output directory
OUTPUT_DIR="./pokemon_data"
mkdir -p "$OUTPUT_DIR"  # Ensure the folder exists

# Maximum number of retries per request
MAX_RETRIES=3

# Function to fetch Pokémon data with retries
fetch_pokemon() {
    POKEMON=$1
    FILENAME="$OUTPUT_DIR/${POKEMON,,}.json"  # Convert to lowercase for filename
    RETRIES=0

    echo "Fetching data for $POKEMON..."

    while [ "$RETRIES" -lt "$MAX_RETRIES" ]; do
        RESPONSE=$(curl -s -w "%{http_code}" -o "$FILENAME" "$API_BASE/${POKEMON,,}")
        HTTP_STATUS=${RESPONSE: -3}

        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Successfully saved data for $POKEMON in $FILENAME"
            return 0
        else
            echo "Attempt $((RETRIES+1)) failed for $POKEMON (HTTP $HTTP_STATUS). Retrying..."
            RETRIES=$((RETRIES + 1))
            sleep $((2 + RANDOM % 3))  # Add a random delay (2-5 sec) to avoid rate-limiting
        fi
    done

    echo "Failed to fetch $POKEMON after $MAX_RETRIES attempts." | tee -a errors.txt
    return 1
}

# Run API requests in parallel
for POKEMON in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$POKEMON" &
done

# Wait for all background processes to finish
wait

echo "All Pokémon data retrieval completed!"

