#!/bin/bash

POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")
API_BASE="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="./pokemon_data"
mkdir -p "$OUTPUT_DIR"

MAX_RETRIES=3
declare -a JOB_PIDS=()

fetch_pokemon() {
    POKEMON=$1
    FILENAME="$OUTPUT_DIR/${POKEMON,,}.json"
    RETRIES=0

    echo "Fetching data for $POKEMON..."

    while [ "$RETRIES" -lt "$MAX_RETRIES" ]; do
        RESPONSE=$(curl -s -w "%{http_code}" -o "$FILENAME" "$API_BASE/${POKEMON,,}")
        HTTP_STATUS=${RESPONSE: -3}

        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Saved $POKEMON to $FILENAME"
            return
        else
            echo "Attempt $((RETRIES+1)) failed for $POKEMON (HTTP $HTTP_STATUS). Retrying..."
            RETRIES=$((RETRIES + 1))
            sleep $((2 + RANDOM % 3))
        fi
    done

    echo "Failed to fetch $POKEMON after $MAX_RETRIES attempts" | tee -a errors.txt
}

# Launch background jobs and store their PIDs
for POKEMON in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$POKEMON" &
    JOB_PIDS+=($!)
done

# Optionally monitor and kill any job that exceeds a hard timeout
TIMEOUT=15  # seconds
START_TIME=$(date +%s)

while :; do
    sleep 1
    NOW=$(date +%s)
    ELAPSED=$((NOW - START_TIME))

    if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
        echo "‚è± Timeout reached. Killing leftover jobs..."
        jobs -p | xargs -r kill -9
        break
    fi

    # Break early if all jobs have completed
    ACTIVE=$(jobs -r | wc -l)
    if [ "$ACTIVE" -eq 0 ]; then
        break
    fi
done

echo "Data retrieval finished (completed or cleaned up)."
